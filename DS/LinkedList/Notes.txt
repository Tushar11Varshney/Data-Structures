1.Construction of LL
2.LL to stack
3.LL to queue   

    4.Get decimal Value
    5.Kth node from middle
    6.Rotate right
    7.Reverse List(5)-2+print reverse
    8.Middle of Linked List(2 types)

    9.Delete node(node to be deleted given) 4-1
    10.Delete duplicate(1-2/2type)*

    11.Remove element with specific value *
    12.Remove nth from end(2) *
    13.Kth from last
    14.Swap nodes(2)

    15.IsPalindrome(2)
    16.DataReverse(3)
    17.Reorder List(2)
    18.Again Reorder List

    19.Merge Two List(2)
    20.Sort list *
    21.Merge K List(2) *

    22.Detect cycle
    23.Find meeting point,cycle length,tail length,no of rotn before and after meeting point *
    24.Intersection of LL(2) */2nd method

    25.Partition a list
    26.Sort binary list
    27.OddEven List(index/value)(2+1)
    28.Even reverse

    31.Reverse between *
    29.K reverse(3)  *
    32.Reverse Alternate k nodes *
    30.Swap pairs

    33.Add two LL/digit stored in reverse order *
    34.Subtract number *
    35.Multiply numbers *

    36.Next larger node
    37.Number of Connected Components *
    38.Insertion sort * 
    39.LRU Cache(2) * 
    40.Copy List with random pointer
    41.Split list to parts *

//1st
// Node p = head, q = null, r = null; // give meaningfull variable name
// tail = head;
// while (p != null)
// {
//     q = p; //q ek trah se current node hogya then p forward hogya aur r prev hogya..curr prev forward krwaya tha rajneesh sir ne
//     p = p.next;
//     q.next = r;
//     r = q;
// }
// head = q;

//2nd
// if (p != null) // (do pointer recursion mein krwado..(q,p)...
// {
//     reversePRHelper(p, p.next);
//     p.next = q;
// }
// reversePRHelper(null, head);

//3rd
// if (p == null)
//     return;
// reversePRHelper2(p.next);
// if (p == tail)
//     return;
// else
//     p.next.next = p;
/*reversePRHelper2(head);
head.next = null;
// Node temp = tail;  //for pep
// tail = head;
// head = temp;*/

//leetcode 237
void deleteNode1(ListNode *node)
{ //1ptr
    ListNode *curr = node;
    while (curr->next->next != nullptr)
    {
        curr->val = curr->next->val;
        curr = curr->next;
    }
    curr->val = curr->next->val;
    curr->next = nullptr;
}
void deleteNode2(ListNode *node)
{ //2ptr
    ListNode *curr = node->next;
    ListNode *prev = node;
    while (curr->next != nullptr)
    {
        prev->val = curr->val;
        prev = curr;
        curr = curr->next;
    }
    prev->val = curr->val;
    prev->next = nullptr;
}
void deleteNode3(ListNode *node)
{
    ListNode *prev = node;
    ListNode *nxt = node->next;
    ListNode *back = nullptr;

    while (nxt != nullptr)
    {
        prev->val = nxt->val;
        back = prev;
        prev = nxt;
        nxt = nxt->next;
    }

    back->next = nullptr;
}

1.Number of Connected Components-1.add all given ele in hs 
                    2.when prev null and hashset contain curr val then incr
                    3.if hash set dont contain prev and contain current then inc
                    4.move curr and prev..r->newComponent 

2.Insertion Sort--1.till c!=N..everytime p on dummy and store for .think logic in btw..not on full unsorted
                2.check if p.nxt!=N && its val<currVal..the move prev
                3.c->next=p->next..p->next=curr..c=f
                4.r->dummy->next

3.Reverse Alternate K Nodes-1.calc size..size<b r->head.
                            2.take oh,ot tt,th,..while sz>=B..if(!skip){store,addFirst,curr to f}..assign ot and oh..th,tt=null..skip=true
                            3.pt ot->next to curr..move ot & curr,skip=false..decr size by B......ot->next=curr;

4.Sort Binary List-1.take do po,de,pe move and join at last set prev->next of both and r->d0->next

5.Even Reverse- 1.Segregate even posn and oddPosn list and make both prevNext null
                2.reverse even list..and make de->next=prev...c1=de->nxt,c2=do->next
                3.join both list now..till both curr!N then check posn even/odd{store,point next and move}..incr posn

6.Add Two list- 1.Pass both list head and size..
                2.if Both null return 0
                3.Check which has greater pv...uski decrease in carry=call(pv1>pv2 ,pv1<pv2,pv1==pv2),add both digit..rem in addFirst and quo as carry..return carry
                4.At Last check if carry>0 add first it then return result.

7.Get Decimal Value-1.calc size
                    2.run till c!=N calculate decimal Value(c->val*2^(size-1)) and move curr r->dV

8.Rotate Right-1.Basic check and Calc size and simplify k..k==0 r->h
                2.jump curr to breakpoint ,c->n=null,forward=curr next (also now newHead) jump f till last and make f next pt to head..r->newHead

9(2).Swap Nodes-M1 1.Calc size if k-1 and size-k equal then r->head
            2.make fjump and bjump(from beginning) and swap two node value..r->head

            M2-first pointer move k time and +1(take kth node)
            2nd ptr move till first become null
            3.swap(kth and p2 value)

10.Partition List-1.make dummysmall,greater and prev for them
                2.till curr not null point p1,p2 acc to value,move prev and current
                3. make both p1 and p2 next null...make p1 next point  to dg next..r->ds->next

11.Next Greater Node-Calc size and make ans array of that size
            2.take a stack of pair{val,count}..run  till curr!=N and nextGreater logic...push in stack,incr count and move next
            3.r->ans

12.Copy randomList-1.fn to copy the nodes
                   2.2nd fn-if node random not null then set duplicate node random
                   3.Take dummy node and extract both 

13.Reverse Between-Make tempH,tempT..run till idx<n and if idx lies then store frwrd,c.n=null,addFirstNode,move curr and idx++
                2.[3,6][7,10] if idx>n and prev!N set prev and tt r->h
                   else set tt next to curr r->th
                   else move ptrs incr idx
                3.r->head

14.Oddeven List-1.Basic check..Calculate size & make 4 ptr,oh,ot,eh,et
                2.run till i<=size..take out value and call removeFirst fn
                3.if i is odd then call addLast and pass(oh,ot) else even waale
                4.join ot with eh..r->oh

15.Oddeven List-ya fir 4 pointer dummyeven,odd,prevodd/even then iterate current on list...
            2.move prevEven and prevOdd according to value
            3.make prevOdd next null and join both.(take dummy to avoid null check)

16.Subtract List-bc:if l2=null r->l1..if l1=null make l2 head negative and return l2
                2.reverse both list..take dummy and prev
                3.till l1 not null..calc differnce and if <0 add+10 make new node (join) ..and move l1,check if node exist and dif<0 then -1 and move l2 if not null...r->rL(d.next)

17.Multiplication..1)Sum two list=till l1!=N ||c!=0 
                    2.cal sum=carry+l1(if l1 exist)+l2.next(l2.next exist)..cal digit/carry
                    3.if l2 next exist then replace value else make new node l2.next=()...move l2
                    4.move ptr l1 only if l1 was not null.
                
            2)Multiply With one digit-1.dummy node..1.till l1!=N ||c!=0 
                        2.calc sum(carry+l1.val*d(if exist))..carry,digit
                        3.new node and (join) move l1 if l1 was not null
            
            3)Main fn-reverse both list..dummy..till l2!=null...call onedigit call sum(prod,prev)move l2 and prev
            2.reverse(d.next)

18.Reverse Data-1.p==null r...call(p.next,f+1)
               2.If recursively take one pointer on left and at backtrack time if floor>=size/2..then swap and move left

19.Palindrome-1.p==null r->t
            2.res=call(p.next,f+1)
            3.res=f..r->f..else if data unequal r->f..else move left and r->t

20.Fold recursively-1.f>sz/2 store f..set fleft and right and move fleft to f
                    2.if f==sz/2..move tail to right and tail.next=null

21.LL to Stack-Use list Fn first waale use kro ya last waale bcz stack mein ek hi end se removal aur add hota hai.

22.LL to Queue-addlast add kelie aur removeFirst remove kelie aur getFirst() get kelie...ya addfirst aur removelast
