1.largest sq all 1
2.Max Difference of 01 in BS
3.Max subarray atleast size k
4.Numeric Keypad
5.Knight probablity
6.Longest repeating subseq
Min cost to make string identical.
lcs of 3
distinct transformations
min delete sum ascii

2.scramble string
3.cherry pickup

//97
//recursive
public boolean isScramble_helper(String s1,String s2)
{
    if(s1.equals(s2))return true;
    
    int n=s1.length();
    for(int i=0;i<n-1;i++)
    {
        String s3=s1.substring(0,i+1);
        String s4=s2.substring(0,i+1);
        String s5=s1.substring(i+1);
        String s6=s2.substring(i+1);
        
        String s7=s1.substring(0,i+1);
        String s8=s2.substring(s2.length()-(i+1));
        String s9=s1.substring(i+1);
        String s10=s2.substring(0,s2.length()-(i+1));
        
        System.out.println(s3+" "+s4);
        System.out.println(s5+" "+s6);
        System.out.println(s7+" "+s8);
        System.out.println(s9+" "+s10);
        
        if( (isScramble_helper(s3,s4) && isScramble_helper(s5,s6)) || 
        (isScramble_helper(s7,s8)  && isScramble_helper(s9,s10)))
        return true;
    }
        
    return false;
}

//index shrinked virtually
public boolean isScramble_helper2(String s1,String s2,int si1,int ei1,int si2,int ei2)
{
    if(s1.substring(si1,ei1+1).equals(s2.substring(si2,ei2+1)))return true;
    
    int n=s1.length();
    for(int i=0;i<ei1-si1;i++)
    {          
        
        if( (isScramble_helper2(s1,s2,si1,si1+i,si2,si2+i) && isScramble_helper2(s1,s2,si1+i+1,ei1,si2+i+1,ei2)) || 
        (isScramble_helper2(s1,s2,si1,si1+i,ei2-i,ei2)  && isScramble_helper2(s1,s2,si1+i+1,ei1,si2,ei2-i-1)))
        return true;
    }
        
    return false;
}

public boolean isScramble_helper2(String s1,String s2,int si1,int si2,int len,Boolean [][][]dp)
{
    if(s1.substring(si1,si1+len).equals(s2.substring(si2,si2+len)))return dp[si1][si2][len]=true;
    
    if(dp[si1][si2][len]!=null)return dp[si1][si2][len];
    
    for(int k=1;k<len;k++)
    {          
        
        if( (isScramble_helper2(s1,s2,si1,si2,k,dp) && isScramble_helper2(s1,s2,si1+k,si2+k,len-k,dp)) || 
        (isScramble_helper2(s1,s2,si1,si2+len-k,k,dp)  && isScramble_helper2(s1,s2,si1+k,si2,len-k,dp)))
        return dp[si1][si2][len]=true;
    }
        
    return dp[si1][si2][len]=false;
}

public boolean isScramble(String s1, String s2) {
    if(s1.length()!=s2.length())
        return false;
    return isScramble_helper(s1,s2);
    // return isScramble_helper2(s1,s2,0,n-1,0,n-1);
    //return isScramble_helper2(s1,s2,0,0,n,new Boolean[n][n][n+1]);
}

public int cherryPickup_helper(int [][]grid,int r1,int c1,int c2,int n,int [][][]dp)
    {
        int r2=r1+c1-c2;
        if(r1>=n||c1>=n||c2>=n||r2>=n||grid[r1][c1]==-1||grid[r2][c2]==-1)
            return Integer.MIN_VALUE;
        
        if(dp[r1][c1][c2]!=0)
            return dp[r1][c1][c2];
        
        //both person will reach bottom at same time
        if(r1==n-1 && c1==n-1)
        {
            return dp[r1][c1][c2]=grid[r1][c1];
        }
        
        int cherries=0;
        if(r1==r2 && c1==c2)
            cherries=grid[r1][c1];
        else  //dono alg alg cell pr hain jab
        {
            cherries=grid[r1][c1]+grid[r2][c2];
        }
        
        int dd=cherryPickup_helper(grid,r1+1,c1,c2,n,dp);
        int rr=cherryPickup_helper(grid,r1,c1+1,c2+1,n,dp);
        int dr=cherryPickup_helper(grid,r1+1,c1,c2+1,n,dp);
        int rd=cherryPickup_helper(grid,r1,c1+1,c2,n,dp);
        cherries+=Math.max(Math.max(dd,rd),Math.max(rr,dr));
        
        return dp[r1][c1][c2]=cherries;
    }
    
public int cherryPickup(int[][] grid) {
                
            int n=grid.length;
            // int [][][][]dp=new int[n][n][n][n];
            int [][][]dp=new int[n][n][n];
            //4d dp reduced to 3d because har point pr equal step chlrhe hain so r1+c1==r2+c2;
            
            return Math.max(0,cherryPickup_helper(grid,0,0,0,n,dp));
}

public static int numericKeypad(int n) {
        int[][] dp = new int[n + 1][10];

        int[][] keyWeCanPress = { { 0, 8 }, { 1, 2, 4 }, { 1, 2, 3, 5 }, { 2, 3, 6 }, { 1, 4, 5, 7 }, { 2, 4, 5, 6, 8 },{ 3, 5, 6, 9 }, { 4, 7, 8 }, { 5, 7, 9, 8, 0 }, { 6, 8, 9 } };
        for (int i = 0; i < n + 1; i++) {
            for (int j = 0; j < 10; j++) {
                if (i == 0)
                    dp[i][j] = 0;
                else if (i == 1)
                    dp[i][j] = 1;
                else {
                    for (int k = 0; k < keyWeCanPress[j].length; k++) {
                        dp[i][j] += dp[i - 1][keyWeCanPress[j][k]];
                    }
                }
            }
        }

        int count = 0;
        for (int i = 0; i < 10; i++)
            count += dp[n][i];

        return count;
    }
    
// 688
public double knightProbability(int n, int k, int row, int column) {

    double curr[][] = new double[n][n];
    double next[][] = new double[n][n];

    curr[row][column] = 1.0;
    int[][] dirs = { { -2, 1 }, { -1, 2 }, { 1, 2 }, { 2, 1 }, { 2, -1 }, { 1, -2 }, { -1, -2 }, { -2, -1 } };
    for (int i = 0; i < k; i++) {
        for (int r = 0; r < n; r++) {
            for (int c = 0; c < n; c++) {
                if (curr[r][c] != 0.0) {
                    for (int j = 0; j < dirs.length; j++) {
                        int x = r + dirs[j][0];
                        int y = c + dirs[j][1];

                        if (x >= 0 && x < n && y >= 0 && y < n)
                            next[x][y] += curr[r][c] / 8.0;
                    }
                }
            }
        }

        curr = next;
        if (i != k - 1)
            next = new double[n][n];
    }

    double result = 0.0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (curr[i][j] != 0)
                result += curr[i][j];   //probablity knight in board
        }
    }

    return result;
}
    
public static int maxSubArraysizeK(int[] arr, int k) {
    int n = arr.length, runningSum = -(int) 1e8;
    int[] kadaneArray = new int[n];

    for (int i = 0; i < n; i++) {
        runningSum = Math.max(runningSum + arr[i], arr[i]);
        kadaneArray[i] = runningSum;
    }

    int i = 0, sum = 0, gsum = -(int) 1e8, j = 0;
    for (; i < k; i++) {
        sum += arr[i];
    }
    gsum = sum;

    while (i < n) {
        sum = sum + arr[i++] - arr[j++];
        gsum = Math.max(gsum, Math.max(sum, sum + kadaneArray[j - 1]));
    }

    return gsum;
}

public static int maxDifferenceof01inBS(String str) {

    int rsum = -(int) 1e8, gsum = -(int) 1e8;
    for (int i = 0; i < str.length(); i++) {
        int val = str.charAt(i) - '0';
        if (val == 1)
            val = -1;
        else if (val == 0)
            val = 1;
        rsum = Math.max(rsum + val, val);
        gsum = Math.max(rsum, gsum);
    }

    return gsum;
}

// 221
public static int largestSquareAll1(int n, int m, int[][] arr) { 
    int[][] dp = new int[n][m];

    int max = 0;
    for (int i = n - 1; i >= 0; i--) {
        for (int j = m - 1; j >= 0; j--) {
            if (i == n - 1)
                dp[i][j] = arr[i][j];
            else if (j == m - 1)
                dp[i][j] = arr[i][j];
            else if (arr[i][j] != 0) {
                dp[i][j] = Math.min(dp[i][j + 1], Math.min(dp[i + 1][j + 1], dp[i + 1][j])) + 1;
            }

            max = Math.max(max, dp[i][j]);
        }
    }

    return max;
}

public static int longestRepeatingSubseq(String str){
    int n = str.length();
    int[][] dp = new int[n + 1][n + 1];

    for (int i = n; i >= 0; i--) {
        for (int j = n; j >= 0; j--) {
            if (i == n || j == n)
                dp[i][j] = 0;
            else if (str.charAt(i) == str.charAt(j) && i != j)
                dp[i][j] = dp[i + 1][j + 1] + 1;
            else
                dp[i][j] = Math.max(dp[i][j + 1], dp[i + 1][j]);
        }
    }
    return dp[0][0];
}

//583
int minCostToMakeStringIdentical(string word1, string word2)
{
    int n = word1.length();
    int m = word2.length();

    vector<vector<int>> dp(n + 1, vector<int>(m + 1, -1));
    int lcsLength = longestCommonSubsequence(n, m, word1, word2, dp);

    return n - lcsLength + m - lcsLength;
}

//https://practice.geeksforgeeks.org/problems/lcs-of-three-strings0028/1
// aprroach of finding out from two then taking common in 3 will not work because s1="fabb" s2="sabbf" s3="ftuv"
public int LCSofThree(String A,String B,String C,int n1,int n2,int n3,int [][][]dp)
{
    if(n1==0 || n2==0 || n3==0)
    dp[n1][n2][n3]=0;
    
    if(dp[n1][n2][n3]!=-1)return dp[n1][n2][n3];
    
    char ch=A.charAt(n1-1);
    int length=0;
    if(ch==B.charAt(n2-1) && ch==C.charAt(n3-1) && B.charAt(n2-1)==C.charAt(n3-1))
    length=LCSofThree(A,B,C,n1-1,n2-1,n3-1,dp)+1;
    else{
        length=Math.max(LCSofThree(A,B,C,n1-1,n2,n3,dp),Math.max(LCSofThree(A,B,C,n1,n2-1,n3,dp),LCSofThree(A,B,C,n1,n2,n3-1,dp)));
    }
    
    return dp[n1][n2][n3]=length; 
}

public int LCSof3(String A, String B, String C, int n1, int n2, int n3) 
{ 
    int [][][]dp=new int[n1+1][n2+1][n3+1];
    for(int [][]d:dp)
        for(int []a:d)
            Arrays.fill(a,-1);
    return LCSofThree(A,B,C,n1,n2,n3,dp);
}

//https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/dynamic-programming/distinct-transformations-official/ojquestion
public static int distinctTransformation(String s, String t, int si, int ti, int[][] dp) {

    if (ti == t.length())//target khtm
        dp[ti][si] = 1;
    else if (si == s.length()) //source khtm
        dp[ti][si] = 0;

    if (dp[ti][si] != -1)
        return dp[ti][si];

    char ch1 = s.charAt(si);
    char ch2 = t.charAt(ti);

    if (ch1 == ch2) {
        dp[ti][si] = distinctTransformation(s, t, si + 1, ti, dp) + distinctTransformation(s, t, si + 1, ti + 1, dp);
    } else
        dp[ti][si] = distinctTransformation(s, t, si + 1, ti, dp);

    return dp[ti][si];
}

public static int distinctTransformation_DP(String s, String t) {

    int n = s.length();
    int m = t.length();
    int[][] dp = new int[m + 1][n + 1];

    for (int i = m; i >= 0; i--) {
        for (int j = n; j >= 0; j--) {
            if (i == m)
                dp[i][j] = 1;
            else if (j == n)
                dp[i][j] = 0;
            else {
                char ch1 = t.charAt(i);
                char ch2 = s.charAt(j);

                if (ch1 == ch2) {
                    dp[i][j] = dp[i][j + 1] + dp[i + 1][j + 1];
                } else
                    dp[i][j] = dp[i][j + 1];
            }
        }
    }

    return dp[0][0];
}

// 712
public int minimumDeleteSum(String s1, String s2) {
    int n = s1.length();
    int m = s2.length();

    int[][] dp = new int[n + 1][m + 1];

    for (int i = n; i >= 0; i--) {
        for (int j = m; j >= 0; j--) {
            if (i == n && j == m)
                dp[i][j] = 0;
            else if (i == n)
                dp[i][j] = (int) s2.charAt(j) + dp[i][j + 1];
            else if (j == m)
                dp[i][j] = (int) s1.charAt(i) + dp[i + 1][j];
            else {
                if (s1.charAt(i) == s2.charAt(j))
                    dp[i][j] = dp[i + 1][j + 1];
                else
                    dp[i][j] = Math.min(dp[i + 1][j] + s1.charAt(i), dp[i][j + 1] + s2.charAt(j));
            }
        }
    }
    return dp[0][0];
}

