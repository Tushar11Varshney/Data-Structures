diary
22-installation vscode java c++
c++ kelie microsoft ki site pr jaakr phle vscode install fir uskelie compiler mingw-64bit(usme base aur c++ compiler)pr tick krna hai fir apply( matlab install ) aur uske baad c++ ki extension and add mingw bin folder to environment variable for java go to microsoft site and install package for java and install extension for it.
=>java basics,c++ basics

======Extra's
56.NumericKeypad-1.dp[n+1][10]..make array of keyWeCanpress
                2.loop of row ..inner of colm..i=0 put 0..i=1 put 1
                    2.1 loop on keyWeCanpress[j][k]..dp[i][j]+=dp[i-1][keyWeCanpress[j][k]]
                3.loop on n row..and calculate sum of all ele

57.Longest Common Substring-1.dp[n+1][m+1]
                            2.loop(row[1,n],col[1,n]) find ch1(i-1),ch2(j-1)
                            3.if = then store result dp[i-1][j-1]+1 else 0 and update maxLength
                            4.r->maxlen

58.Knight Prob:1.Make 2dp of double cur,next,dirn Array
    2.loop of k,row,colm..if(cur[i][j]!=0)..
        2.1 loop of dirn array calc x & y check valid/not..next[i][j]+=cur[i][j]/8.0
        2.2 change curr to next and dont make new next if i==k-1 else make
    3.calculate value by traversing curr and r->val

59.Max difference of 0 & 1-traverse array if 1 then take as -1 if 0 then take as 1 and apply kadane 

60.Distinct Subseq-make long dp[n+1]
                   2.dp[0]=1 and take hashmap
                   3.dp[i]=dp[i-1]...if map contains character then sub dp[prevOccIndex-1]
                   4.put ch->idx in map
                   5.r->dp[n]-1

61.Count dit palindromic subs-1.map,prev[n],next[n]....if map dont contain prev[i]=-1 else put prev[i]=map[ch]..and update map(ch,i)
                              2.clear map..and do this for both prev and next...use gap strategy
                              3.gap=1 1..gap=2 2..if ch1!=ch2 dp[i][j]=dp[ch1m]+dp[mch2]-dp[m]
                                3.2 if ch equal..3.2.1 if ne=pre  2*dp[i+1][j-1](m)+1
                                3.3 if pre<ne 2*dp[m]-dp[pre+1][ne-1]
                                3.4 dp[i][j]=2*dp[i+1][j-1](m)+2
                              4.r->dp[0][n-1]

62.Regular exprn-1.dp[n+1][m+1]
                2.first box(e/e)-true else if(i==0) false
                3.first col-if * 2 rows above else false
                4.else take out ch1,ch2..if not equal false..if equal or ch1 '.' dp[i-1][j-1]
                    4.2 if ch1 * 2 rows above if still false ch3(p(i-2))..if(ch3==ch2||ch3 .)dp[i][j]=dp[i-1][j]
                5.r->dp[n][m]

63.Longest Common Subsequence-3d dp[n1/n2/n3+1]..fill -1
                              2.bc:n1==0||n2==0||n3==0...memo
                              3.if all char equal(n1-1,n2-1,n3-1)
                              4.else max(call(n1-1,n2-1,n3-1))
                              4.r->dp[n1][n2][n3]=l

64.Max sum subarray atleast size K-take a array and store max upto each point using kadane
                                  2.calc sum  k loop and assign to gsum
                                  3.now shift the window..and update gsum(sum,sum+dp[j-1])..r->gsum

65.Optimal strategy----not greedy from end../I pick always odd idx/
                    1.gap strategy
                    2.gap=0 arr[i],gap=1 max btw a[i &j]
                    3.else max(a[i]+min(i+2/j,i+1/j-1),a[j]+min(i+1/j-1,i,j-2))
                    4.d->dp[0][n-1]

66.Egg drop:dp[n+1][f+1] bc:f=0->0,f=1->1,e=0->0,e=1->f
                        2.choose min of all worst option
                        3.dp[i][j]=min+1
                        4.r->dp[e][f]

67.ReArrange Stick-1.dp[n+1][k+1]..put each stick at last..loop normally for 2d if sticks=n put 1..else if sticks||n zero put 0...else dp[i-1][j-1](bigger #) + (j-1)*dp[i][j-1](due to smaller #)

68.Cheery-make a 3d dp..and calculate r2 using eqn...return -inf from out of matrix and if on grid value is -1
        2.calc cherry only 1 time if at same pt else of both pt
        3.make all calls..dd/dr/rr/rd and store max in dp.

69)*.Can Reach End jumpGame 1.dp[n+1]
                          2.calc minj,maxJ
                3.loop..for min & maxJ..if s[j] not -1 and dp[j] present return dp[idx]=dp[j] 
                4.else call for that return dp[idx]=j
                5.out of loop dp[idx]=0;

70.Nth Super ugly Number-1.pointersArray[m],dp[n],dp[0]=1
                        2.traverse m and store min ptr[j]*dp[ptrs[j]]
                        3.traverse m and increase pointer whoever incr it dont break
                        4.r->dp[n-1]

71)Count Binary String no cons zero-dp[2][n+1]..dp[0][3] ending with 0 of length 3..do using var no
                                    dp space reqd.......new0=oew1,new1=oew0+oew1..return oew0+oew1

72)Arrange Building-same as above 0->building 1->space..totalWays-cBui+cSp..r->tw*tw

73)Count subseq of a+b+c+ - 1.initially all 0(a,ab,abc)..make a table row(type) colm(0.string char)
                            2.if ch=a 2*a+1,b->2*ab+a,c->2*abc+ab(O(n) O(1)space)

74)Max sum non adjacent ele-1.inc=ar[0],e=0..loop[1,n]:do incl on previous excl..and store max(inc,exc) in exc.........r->max(Exc,inc)

75)Paint house-make dp[3][n]-dp[2][3]-if in this green color must and following rule
            2.initially at 0th col store ini value,then store min of other two color at prev house(dp)+own paint val

76)(2)Paint house 2-M1:O(n3)-1.0th row fill initial value
                          2.loop for each box(starting frm 1 0)..find min of all colours except that which is cons(in prv row of dp)+own paint value
                          3.loop for k colour and find min value in nth house 
                
                M2:O(n2)-1.find least and sleast
                         2.loop row [1,n) if dp[i-1][j]!=least then add paint+least else paint+sleast and update least and sleast each time
                         3.find min in all k color

77)Paint fence-1.same(k-rr/gg/bb),diff(k*(k-1)-rg/rb..)..3<=n same<-diff diff-<total*(k-1).total=s+D

78)Tiling 2*1-bc:n==0 r-> n<0 r->0
                 2:h call(n-1),v(n-2)..dp[n]=a+b...

                 M2-dp[1/2]=1/2..[3,n]dp[i]=dp[i-1]+dp[i-2]

79)Tiling M*N using M*1-loop [1,n] i<m 1..i==m 2..dp[n]=dp[i-1]+dp[i-m]..r->dp[n]

80)Partition into subset-n=0|k=0|n<k r->0
                        2.loop on team[1,k] and inner player[1,n]..t<p put 0 t==p r->1 else
                            2.1 (n-1)people*Ksubset+(n-1 people)*(k-1 subset) 

81)Temple Offering-1.take f[0]=1 and iterate if we go up prev+1 else 1
                   2.take f[n-1]=1 and iterate if we go up next+1 else 1
                   3.take max at both point and add

83)Longest Repeating Subsequence-dp[n+1][n+1]..loop bottom row..inner loop right colm..1.i==n||j==n put 0
                                2.if char equal and index not equal dp[i+1][j+1]+1
                                3.else max(dp[i][j+1],dp[i+1][j])..r->dp[0][0]

84)Minimum ascii delete sum-1.dp[n+1][m+1]
                            2.i==n && j==n put 0
                            3.i==n ascii of j + dp[i][j+1]..j==m ascii of i + dp[i+1][j]
                            4.if char equal f(r1,r2)
                            5.else max(c1+f(r1,c2r2),c2+f(c1r1,r2))

85)Min cost to make string identical-(n-lcsLength+m-lcsLength)

86)Count of ap subarray-dp[n]..dp[4]-store ap if arr[4] is included...and ans+=dp[i]

87)count of ap subsequences-1.take array of hashmap and insert hashmap(cd vs count of ap subseq ending with arr[i])
                            2.inner loop[0,n) and inner [0,i) if d<=min d>= max cont
                            3.if map[j] contain diff then count+=apEndWith j..and put in map dif->apEndWith j+apEndWith i(def 0)+1
                            4.else dif->map[i]+1

88)Largest square all 1-travel from bt right to top left and i==n || j==n store a[i][j]
                      2.else min(right,down,diagonal)+1 and update max

90)Word Break-1.dp[n]--dp[3]pepc->how many words from pepc
              2.for each index loop j[0,i] cut substring and check if present in dict dp[i]+=dp[j-1] else dp[i]+=1
              3.check at last if word psb/not

91)Distinct Transformation-1.bc:t->length r->1 s->length r->0
                          2.si/ti char not equal call(si+1,ti)..else call(si+1,ti+1)+call(si+1,ti)

92)Scramble String-1.make 3d dp,pass s1,si2,len
                   2.bc:if substring of s1 and s2 equal r->t
                   3.loop of cut[1,len]..compare of left of s1 to left of s2..and left of s1 to right of s2..if true whichever r->t and store ..out of loop r->store false